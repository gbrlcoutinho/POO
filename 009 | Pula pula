import {evaluate, puts, write} from "./shell";

class Kid {
  private name: string;
  private age: number

  public constructor (name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  public getName(): string {
    return this.name;
  }

  public getAge(): number {
    return this.age;
  }

  public setName(name: string): void {
    this.name = name;
  }

  public setAge(age: number): void {
    this.age = age;
  }

  public toString(): string {
    return this.name + ":" + this.age;
  }
}

class Trampoline {
  private waiting: Array<Kid | null>;
  private playing: Array<Kid>;

  public constructor() {
    this.waiting = [];
    this.playing = [];
  }

  public arrive(kid: Kid) {
    this.waiting.unshift(kid);
  }

  public remove(name: string, list: Array<Kid>) {
    
  }

  public enter () {
    
  }
  
  public leave() {
    
  }

  public remotedKid(name: string): Kid {
    
  }

  public toString(): string {
    return "[" + this.
  }
}

function main() { 
    let chain = new Map();
    let param: string[] = [];
    let trampoline = new Trampoline();
  
    chain.set("init",   () => trampoline = new Trampoline());
    chain.set("show",   () => puts(trampoline.toString()));
    chain.set("arrive", () => trampoline.arrive(new Kid(param[1], param[2])));
    chain.set("remove",  () => trampoline.remove());
    chain.set("eat",    () => pet.eat());
    chain.set("sleep",  () => pet.sleep());

    evaluate(chain, param);
};

main()

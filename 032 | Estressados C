import {evaluate, puts} from "./shell";

function inside(vet: number[], value: number): boolean {
    for (let elem of vet)
      if(elem === value)
        return true;
    return false;
}

function get_men(vet: number[]): number[] {
   let vetmen = new Array;
    for(let i = 0; i < vet.length; i++) {
      if(vet[i] > 0) {
        vetmen.push(vet[i])
      }
    }

    
    return vetmen;
}

function get_calm_women(vet: number[]): number[] {
  let calmw = new Array;
  for(let i = 0; i < vet.length; i++) {
    if(vet[i] < 0 && vet[i] > -10) {
      calmw.push(vet[i]);
    }
  }
  return calmw;
}

function sort(vet: number[]): number[] {
    let aux = 0;
   for(let i = 0; i < vet.length; i++) {
    for(let j = 0; j < vet.length; j++) {
     if(vet[i] < vet[j]) {
        aux = vet[i];
        vet[i] = vet[j];
        vet[j] = aux;
      }  
    }
  }
  return vet;
  }


function sort_stress(vet: number[]): number[] { //todo
}

function reverse(vet: number[]): number[] { //todo
}

function reverse_inplace(vet: number[]): number[] { //todo
}

function unique(vet: number[]): number[] { //todo
}

function repeated(vet: number[]): number[] { //todo
}




// -------------------------- MAIN --------------------------

function main() {
    let chain = new Map();
    let ui: string[] = [];

    chain.set("get_men",() => puts(get_men(to_vet(ui[1]))))
    chain.set("get_calm_women",() => puts(get_calm_women(to_vet(ui[1]), +ui[2])));
    chain.set("sort",() => puts(sort(to_vet(ui[1]))));
    chain.set("sort_stress",() => puts(sort_stress(to_vet(ui[1]))));
    chain.set("reverse",() => puts(reverse(to_vet(ui[1]))));

    evaluate(chain, ui);
}

// Função auxiliar para converter de string para vetor
// "[1,2,3,4]" para [1, 2, 3, 4]
function to_vet(token: string): number[] {
    let size = token.length;
    let inside = token.substring(0, size - 1);
    return inside === "" ? [] : inside.split(",").map(x => +x)
}

main()

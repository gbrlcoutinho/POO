class Car {
  pass: number;
  passMax: number;
  gas: number;
  gasMax: number;
  km: number;

  constructor(passMax: number, gasMax: number, km: number) {
    this.pass = 0;
    this.passMax = 2;
    this.gas = 0;
    this.gasMax = 100;
    this.km = 0;
  }

  enter() {
    if(this.pass + 1 > this.passMax) {
      console.log("fail: limite de pessoas atingido");
      return;
    } else {
      this.pass += 1;
      return this.pass;
    }
  }

  leave() {
    if(this.pass > 0) {
      this.pass -= 1;
    } else {
      console.log("fail: nao ha ninguem no carro");
      return;
    }
  }

  fuel(value: number) {
    if(this.gas + value > this.gasMax) {
      this.gas = this.gasMax;
    }
    else if(this.gas === 0) {
      this.gas += value;
    } 
  }

  drive(value: number) {
    if(this.pass === 0){
      console.log("fail: nao ha ninguem no carro");
      return;
    } 
    else if(this.gas === 0) {
      console.log("fail: tanque vazio");
      return;
    }
    else if(this.gas < value){
      console.log("fail: tanque vazio apos andar " + this.gas + " km");
      this.km += this.gas;
      this.gas = 0;
    }
    else {
      this.gas -= value;
      this.km += value;
    }
  }

  toString(): string {
    let saida = "";
    saida += "pass: " + this.pass + ", "; 
    saida += "gas: " + this.gas + ", ";
    saida += "km: " + this.km;
    return saida;
  }
}
function main() {
    let chain = new Map();
    let param = [];
    let car = new Car();

    chain.set("enter",      () => car.enter());
    chain.set("leave",      () => car.leave());
    chain.set("show",       () => puts(car.toString()));
    chain.set("drive",      () => car.drive(+param[1]));
    chain.set("fuel",       () => car.fuel(+param[1]));
    chain.set("help",       () => puts("show, enter, leave, drive, fuel, help, end"));

    evaluate(chain, param);
}

import { readFileSync } from "fs";

let __lines = readFileSync(0).toString().split("\n");
let input = () => { 
    let a = __lines.shift(); 
    return a === undefined ? "" : a; 
};
let write = (text: any) => process.stdout.write("" + text);
let puts = (text: any) => console.log(text);

function evaluate(chain: Map<string, Function>, param: string[]) {
    while (true) {
        let line = input();
        puts("$" + line);
        param.splice(0); //apagar tudo
        line.split(" ").forEach((x: string) => param.push(x));

        let cmd = param[0];
        if (cmd == "end") {
            return;
        } else if (chain.has(cmd)) {
            chain.get(cmd)!();
        } else {
            puts("fail: command not found");
        }
    }
}


main()
